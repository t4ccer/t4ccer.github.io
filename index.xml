<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>t4ccer</title>
    <link>/</link>
    <description>Recent content on t4ccer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 26 Apr 2020 23:33:39 +0200</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dister32 - Part 1</title>
      <link>/posts/dister32-part1/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/dister32-part1/</guid>
      <description>Introduction Dister32 is my own projects for easy managment of distributed computing on cheap but powerful microcontroller ESP32. ESP32 has built-in wifi module so communication between modules will be fairly simple.
ESP-32s module
The article will be split into 3 parts.
In the first part, I will describe how the cluster will work and implement the simplest features. The second part will be published when ordered PCBs will arrive at me.</description>
    </item>
    
    <item>
      <title>SharpNEAT Tutorial</title>
      <link>/posts/sharpneat-tutorial/</link>
      <pubDate>Thu, 07 May 2020 11:39:44 +0200</pubDate>
      
      <guid>/posts/sharpneat-tutorial/</guid>
      <description>SharpNEAT is great library for developing NEAT networks, but unfortunatly is very poorly documented, so I created some boilerplate code to kickstart Your project.
// inputCount - Count of inout neurons // outputCount - Count of output neurons // specimenCount - Specimen count in each generation  var neatGenomeFactory = new NeatGenomeFactory(inputCount, outputCount); var genomeList = neatGenomeFactory.CreateGenomeList(specimenCount, 0); var neatParameters = new NeatEvolutionAlgorithmParameters { SpecieCount = specimenCount }; var distanceMetric = new ManhattanDistanceMetric(); var speciationStrategy = new ParallelKMeansClusteringStrategy&amp;lt;NeatGenome&amp;gt; (distanceMetric); var complexityRegulationStrategy = new NullComplexityRegulationStrategy(); var network = new NeatEvolutionAlgorithm&amp;lt;NeatGenome&amp;gt; (neatParameters, speciationStrategy, complexityRegulationStrategy); var activationScheme = NetworkActivationScheme .</description>
    </item>
    
    <item>
      <title>DashAI - Geometry Dash AI using NEAT</title>
      <link>/posts/dashai-geometry-dash-ai-using-neat/</link>
      <pubDate>Fri, 01 May 2020 11:39:44 +0200</pubDate>
      
      <guid>/posts/dashai-geometry-dash-ai-using-neat/</guid>
      <description>Geometry Dash is platformer game that I really like, but I suck at it, so I will try to create AI to play it for me. At first, I created simple geometry dash clone and following map.
You can stand on black tiles, red tiles kill. Simple. To create AI I used NEAT algorithm using sharpneat library. Neural network as input takes 7x7 tiles in front of player(picture below) and output is only one, jump or not.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Sun, 26 Apr 2020 23:33:39 +0200</pubDate>
      
      <guid>/about/</guid>
      <description>Contact me using:
 Email (t4ccer@gmail.com) Twitter Github  Blog is using awesome theme created by rhazdon, and modified by me.</description>
    </item>
    
  </channel>
</rss>