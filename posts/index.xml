<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on t4ccer</title>
        <link>/posts/</link>
        <description>Recent content in Posts on t4ccer</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 01 May 2020 11:39:44 +0200</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>DashAI - Geometry Dash AI using NEAT</title>
            <link>/posts/dashai-geometry-dash-ai-using-neat/</link>
            <pubDate>Fri, 01 May 2020 11:39:44 +0200</pubDate>
            
            <guid>/posts/dashai-geometry-dash-ai-using-neat/</guid>
            <description>Geometry Dash is platformer game that I really like, but I suck at it, so I will try to create AI to play it for me. At first, I created simple geometry dash clone and following map.
You can stand on black tiles, red tiles kill. Simple. To create AI I used NEAT algorithm using sharpneat library. Neural network as input takes 7x7 tiles in front of player(picture below) and output is only one, jump or not.</description>
            <content type="html"><![CDATA[<p><a href="https://store.steampowered.com/app/322170/Geometry_Dash/">Geometry Dash</a> is platformer game that I really like, but I suck at it, so I will try to create AI to play it for me. At first, I created simple geometry dash clone and following map.</p>
<p><img src="/img/DashAI/MapD.png" alt="Map"></p>
<p>You can stand on black tiles, red tiles kill. Simple.
To create AI I used <a href="https://en.wikipedia.org/wiki/Neuroevolution_of_augmenting_topologies">NEAT</a> algorithm using <a href="https://github.com/colgreen/sharpneat">sharpneat</a> library. Neural network as input takes 7x7 tiles in front of player(picture below) and output is only one, jump or not.</p>
<p><img src="/img/DashAI/view.png" alt="Cat image"></p>
<p>So, network needs 49 input neuron for each tile type(black and red for now) and neural network on start looks like this(I know, nothing impressive)</p>
<p><img src="/img/DashAI/network1.png" alt="Network1"></p>
<p>It&rsquo;s time to train network. Training took couple of seconds on quad-core Xeon. After 115 generations with 150 specimens in each looks like that(still nothing amazing):</p>
<p><img src="/img/DashAI/network2.png" alt="Network2"></p>
<p>And AI can complete level:</p>
<p><img src="/img/DashAI/recording1.gif" alt="Recording1"></p>
<p>Training progress(fitness is percent of level completeness):</p>
<p><img src="/img/DashAI/progress1.png" alt="Progress1"></p>
<p>If network performs so great let introduce another tile. Green tile - It&rsquo;s possible to jump on it but it&rsquo;s not to stand on it. I created another simple map using new tile:</p>
<p><img src="/img/DashAI/MapE.png" alt="MapE"></p>
<p>Let see how AI can handle new tile type. This time training took a bit longer. AI required 511 generations. What&rsquo;s interesting, network is even simpler than previously.</p>
<p><img src="/img/DashAI/network3.png" alt="Network3"></p>
<p><img src="/img/DashAI/recording2.gif" alt="Recording1"></p>
<p>Training progress:</p>
<p><img src="/img/DashAI/progress2.png" alt="Progress1"></p>
<p>If you want to see how everything is implemented or even add something from yourself source code is available <a href="https://github.com/t4ccer/DashAI">here</a> (binaries are also available there)</p>
<h3 id="program-usage">Program usage:</h3>
<pre><code>DashAI OPTIONS
OPTIONS:
  -t Train network
  -p Play already trained network
</code></pre><h3 id="how-to-create-own-map">How to create own map:</h3>
<p>When creating own map squares colors must be exactly for</p>
<ul>
<li>Black(ground) - #000000</li>
<li>Red(kill) - #ff0000</li>
<li>Green(jump in air) - #00ff00</li>
</ul>
<p>Note that every other color will be interpreted as air(empty). For creating map I used <a href="https://www.getpaint.net/">paint.net</a> but any other graphics program should handle it.<br>
When running binary program map must be named &ldquo;Map.bmp&rdquo;, if compiling from source you can specify map name in NeatConsts.cs file</p>
]]></content>
        </item>
        
    </channel>
</rss>
