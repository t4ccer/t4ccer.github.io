<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bot on t4ccer</title>
    <link>/tags/bot/</link>
    <description>Recent content in Bot on t4ccer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 19 Oct 2020 12:00:00 +0200</lastBuildDate>
    
	<atom:link href="/tags/bot/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Extensible IRC Bot in Haskell</title>
      <link>/posts/extensible-irc-bot-in-haskell/</link>
      <pubDate>Mon, 19 Oct 2020 12:00:00 +0200</pubDate>
      
      <guid>/posts/extensible-irc-bot-in-haskell/</guid>
      <description>Abstract To practice usage of haskell and FP in general I decided to create simple yet powerful and extensible IRC bot using haskell.
Usage Bot is configurable in app/Main.hs file, but example configurations are availble in src/Examples/*.hs.
Base bot Lets look at src/Examples/Base.hs file now. File contains run function that starts IRC bot in an infinite loop, and handleEvent function that handles chat events.
module Examples.Base where import ChatEvents import ExtIrcBot run :: IO () run = runBot BotSettings { host =&amp;#34;irc.</description>
    </item>
    
    <item>
      <title>DashAI - Geometry Dash AI using NEAT</title>
      <link>/posts/dashai-geometry-dash-ai-using-neat/</link>
      <pubDate>Fri, 01 May 2020 11:39:44 +0200</pubDate>
      
      <guid>/posts/dashai-geometry-dash-ai-using-neat/</guid>
      <description>Geometry Dash is platformer game that I really like, but I suck at it, so I will try to create AI to play it for me. At first, I created simple geometry dash clone and following map.
You can stand on black tiles, red tiles kill. Simple. To create AI I used NEAT algorithm using sharpneat library. Neural network as input takes 7x7 tiles in front of player(picture below) and output is only one, jump or not.</description>
    </item>
    
  </channel>
</rss>